{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\camer\\\\Documents\\\\Homework\\\\Book-Search-Engine\\\\client\\\\src\\\\pages\\\\SavedBooks.js\";\n// import React, { useState } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst SavedBooks = () => {\n  // const [userData, setUserData] = useState({});\n  const [userData, setUserData] = useState({});\n  const {\n    data\n  } = useQuery(GET_ME);\n  const updatedUser = (data === null || data === void 0 ? void 0 : data.user) || {};\n  const [removeBook, {\n    error\n  }] = useMutation(REMOVE_BOOK); // create function that accepts the book's mongo _id value as param and deletes the book from the database\n\n  const handleDeleteBook = async bookId => {\n    const {\n      data\n    } = await removeBook({\n      variable: {\n        BookId: bookId\n      }\n    });\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await removeBook(bookId, token);\n      setUserData(updatedUser); // upon success, remove book's id from localStorage\n\n      Auth.removeBook(data.removeBook.token);\n      removeBook(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Jumbotron, {\n    fluid: true,\n    className: \"text-light bg-dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, \"Viewing saved books!\"))), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, userData.savedBooks.length ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:` : 'You have no saved books!'), /*#__PURE__*/React.createElement(CardColumns, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, userData.savedBooks.map(book => {\n    return /*#__PURE__*/React.createElement(Card, {\n      key: book.bookId,\n      border: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }\n    }, book.image ? /*#__PURE__*/React.createElement(Card.Img, {\n      src: book.image,\n      alt: `The cover for ${book.title}`,\n      variant: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 31\n      }\n    }) : null, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 19\n      }\n    }, book.title), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 19\n      }\n    }, \"Authors: \", book.authors), /*#__PURE__*/React.createElement(Card.Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 19\n      }\n    }, book.description), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-block btn-danger\",\n      onClick: () => handleDeleteBook(book.bookId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 19\n      }\n    }, \"Delete this Book!\")));\n  }))));\n};\n\nexport default SavedBooks;","map":{"version":3,"sources":["C:/Users/camer/Documents/Homework/Book-Search-Engine/client/src/pages/SavedBooks.js"],"names":["Jumbotron","Container","CardColumns","Card","Button","useMutation","useQuery","GET_ME","REMOVE_BOOK","Auth","SavedBooks","userData","setUserData","useState","data","updatedUser","user","removeBook","error","handleDeleteBook","bookId","variable","BookId","token","response","err","console","savedBooks","length","map","book","image","title","authors","description"],"mappings":"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","sourcesContent":["// import React, { useState } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\n\n\nimport Auth from '../utils/auth';\n\n\nconst SavedBooks = () => {\n  // const [userData, setUserData] = useState({});\n  const [userData, setUserData] = useState({});\n\n  const { data } = useQuery(GET_ME)\n  \n  \n  const updatedUser = data?.user || {};\n\n  \n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const { data } = await removeBook({\n      variable: {BookId: bookId }\n    })\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await removeBook(bookId, token);\n\n      \n      setUserData(updatedUser);\n      // upon success, remove book's id from localStorage\n      Auth.removeBook(data.removeBook.token)\n    \n    removeBook(bookId);\n   } catch (err) {\n     console.error(err);\n   }\n  \n  };\n\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n"]},"metadata":{},"sourceType":"module"}