{"version":3,"sources":["utils/mutations.js","utils/auth.js","pages/SearchBooks.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","SearchBooks","useState","searchedBooks","setSearchedBooks","useMutation","saveBook","error","searchInput","setSearchInput","handleFormSubmit","event","a","preventDefault","response","ok","Error","json","items","bookData","map","book","bookId","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","handleSaveBook","bookToSave","find","variables","data","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","length","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","Auth","loggedIn","disabled","savedBookId","onClick","GET_ME","SavedBooks","userData","setUserData","useQuery","updatedUser","user","removeBook","handleDeleteBook","variable","BookId","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","addUser","validated","showAlert","setShowAlert","handleInputChange","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","currentTarget","checkValidity","stopPropagation","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.954efd6c.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN_USER = gql`\r\n    mutation login($email: String!, $password: String!) {\r\n        login(email: $email, password: $password) {\r\n            token\r\n            user {\r\n                _id\r\n                username\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n    mutation addUser($username: String!, $email: String!, $password: String!)  {\r\n        addUser(username: $username, email: $email, password: $password) {\r\n            token\r\n            user {\r\n                _id\r\n                username\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n    mutation saveBook($Book: BookContent!) {\r\n        saveBook(Book: $BookContent) {\r\n            bookId\r\n            authors\r\n            description\r\n            title\r\n            image   \r\n            link\r\n            }\r\n        }\r\n    `;\r\n\r\nexport const REMOVE_BOOK = gql`\r\n    mutation removeBook($BookId: String!) {\r\n        removeBook(BookId: $BookId) {\r\n            bookId\r\n            authors\r\n            description\r\n            title\r\n            image   \r\n            link\r\n        }\r\n    }\r\n`;","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useState } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport { useMutation } from \"@apollo/client\";\nimport { SAVE_BOOK } from '../utils/mutations';\n \nimport Auth from '../utils/auth';\n// import { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  // const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  // useEffect(() => {\n  //   return () => savedBookIds(savedBookIds);\n  // });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await (searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n    \n    const { data } = await saveBook({\n      variables: {bookId: bookId}\n    });\n\n    try {\n      const response = await saveBook(bookToSave);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      // if book successfully saves to user's account, save book id to state\n      // setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={(savedBookId) => savedBookId === book.bookId}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {(savedBookId) => savedBookId === book.bookId\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_ME = gql`\r\n    query me {\r\n        user {\r\n            _id\r\n            username\r\n        }\r\n    }\r\n`;","import React, { useState } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\n\n\nimport Auth from '../utils/auth';\n\n\nconst SavedBooks = () => {\n  // const [userData, setUserData] = useState({});\n  const [userData, setUserData] = useState({});\n\n  const { data } = useQuery(GET_ME)\n  \n  \n  const updatedUser = data?.user || {};\n\n  \n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const { data } = await removeBook({\n      variable: {BookId: bookId }\n    })\n\n   \n\n    try {\n      const response = await removeBook(bookId);\n\n      \n      setUserData(updatedUser);\n      // upon success, remove book's id from localStorage\n      Auth.removeBook(data.removeBook.token)\n    \n    removeBook(bookId);\n   } catch (err) {\n     console.error(err);\n   }\n  \n  };\n\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  const [addUser, { error, data}] = useMutation(ADD_USER);\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  \n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n\n    try {\n      const { data } = await addUser({\n        variables: {...userFormData},\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [login, { error, data }] = useMutation(LOGIN_USER);\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login ({\n        variables: {...userFormData}\n      });\n\n     \n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n    <Router>\n      <div>\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={SearchBooks} />\n          <Route exact path='/saved' component={SavedBooks} />\n          <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n        </Switch>\n      </div>\n    </Router>\n  </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}